#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

// parse CLI
$1 parse-workchain-id =: wc    // contract workchain
def? $2 { @' $2 } { "out/lottery" } cond =: file-base  // file path prefix

// code
"out/lottery-code.fif" include <s =: contract_code

// data
<b 0 32 u, 
   file-base +".pk" load-generate-keypair =: wallet_pk B, 
   0 32 u, 
   0 32 u,
   0 Gram, 
   0 Gram, 
   0 32 i,  // owner_workchain
   0x114fd5c7dfba61c710e834699c29ceedf404b8891efa1cf8f63a3d1d81263cdb 256 u,   // owner_account_id
   dictnew dict,  // orders
b> <s =: contract_data

// libraries
null 

// create StateInit = (flags, code, data)
<b 
   b{00110} s, 
   <b contract_code s, b> ref, 
   <b contract_data s, b> ref, 
b> dup =: state_init
dup ."StateInit: " <s csr. cr

// create smart contract address = hash(StateInit)
dup hashu wc swap 2dup 2constant smc_addr
."Smart contract address: " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr

// initial message + signing
<b 
   0 32 u, // first seqno = 0
   0 7 u,  // first operation = 0 (init)
b> dup =: init_message 
dup hashu wallet_pk ed25519_sign_uint rot

// final external query to blockchain
<b 
   b{1000100} s, 
   smc_addr addr, 
   b{000010} s, 
   state_init <s s, 
   b{0} s, 
   init_message <s s,
b>

cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file
."(Saved smart contract creating query to file " type .")" cr
