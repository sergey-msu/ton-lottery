;; Simple Lottery Smart Contract


() recv_internal(int order_amount, cell in_msg_cell, slice in_msg) impure {
    var cs = in_msg_cell.begin_parse();
    int flags = cs~load_uint(4);   ;;  int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool

    ;; ignore bounced
    if (flags & 1) {
        return();
    }

    ;; just receive coins < gas_fee without changing state
    if (order_amount < min_gas()) {  
        return();
    }

    slice src_addr_slice = cs~load_msg_addr();
    (int src_wc, int src_addr) = parse_std_addr(src_addr_slice);

    ;; parse sm state
    (int stored_seqno,
     int pubkey,
     int order_seqno,
     int number_of_wins,
     int incoming_amount,
     int outgoing_amount,
     int owner_wc,
     int owner_account_id,
     cell orders) = unpack_state();

    ;; store only last 20 orders for display statistics
    orders = remove_old_orders(orders, order_seqno);

    ;; if SM has not enough coins to pay probable bet back, just accept payment (no stake)
    if (balance() < 2 * order_amount + min_gas()) {
        builder order = pack_order(order_seqno, 1, now(), order_amount, src_wc, src_addr);
        orders~udict_set_builder(32, order_seqno, order);
        set_data(pack_state(stored_seqno,
                            pubkey,
                            order_seqno + 1,
                            number_of_wins, 
                            incoming_amount + order_amount, 
                            outgoing_amount, 
                            owner_wc, 
                            owner_account_id, 
                            orders));
        return();
    }

    ;; do lottery!
    if (rand(10) < 4) {
        ;; LOOSE: send 1/3 of stake to SM owner
        if (order_amount > 3000000000) {
            send_grams(owner_wc, owner_account_id, order_amount / 3);
        }

        ;; log order entry and update SM state
        builder order = pack_order(order_seqno, 3, now(), order_amount, src_wc, src_addr);
        orders~udict_set_builder(32, order_seqno, order);
        set_data(pack_state(stored_seqno,
                            pubkey,
                            order_seqno + 1,
                            number_of_wins, 
                            incoming_amount + order_amount, 
                            outgoing_amount, 
                            owner_wc, 
                            owner_account_id, 
                            orders));
    }
    else {
        ;; WIN - send 2x to winner
        send_grams(src_wc, src_addr, order_amount * 2);

        ;; log order entry and update SM state
        builder order = pack_order(order_seqno, 2, now(), order_amount, src_wc, src_addr);
        orders~udict_set_builder(32, order_seqno, order);
        set_data(pack_state(stored_seqno, 
                            pubkey, 
                            order_seqno + 1, 
                            number_of_wins + 1, 
                            incoming_amount, 
                            outgoing_amount + 2 * order_amount, 
                            owner_wc, 
                            owner_account_id, 
                            orders));
    }
}



() recv_external(slice in_msg) impure {
    if (slice_empty?(in_msg)) {
        return (); 
    }

    ;; parse sm state
    (int stored_seqno,
     int pubkey,
     int order_seqno,
     int number_of_wins,
     int incoming_amount,
     int outgoing_amount,
     int owner_wc,
     int owner_account_id,
     cell orders) = unpack_state();

    ;; parse input
    var signature = in_msg~load_bits(512);
    var message = in_msg;

    ;; do checks
    int msg_seqno = message~load_uint(32);
    throw_unless(33, msg_seqno == stored_seqno);
    throw_unless(34, check_signature(slice_hash(in_msg), signature, pubkey));

    ;; run business logic

    int action = message~load_uint(7);
    if (action == 0) {
        ;; init contract 
        throw_unless(32, stored_seqno == 0);
        accept_message();
        set_data(pack_state(stored_seqno + 1, pubkey, order_seqno, number_of_wins, incoming_amount, outgoing_amount, owner_wc, owner_account_id, orders));
    } elseif (action == 1) {
        ;; change SM owner address
        throw_unless(35, 288 == slice_bits(message));   ;; check number of bits in message at the momemt (32 + 256) 
        accept_message();  ;; agree to buy gas to finish transaction
        int new_owner_wc = message~load_int(32);
        int new_owner_account_id = message~load_uint(256);
        set_data(pack_state(stored_seqno + 1,
                            pubkey,
                            order_seqno,
                            number_of_wins, 
                            incoming_amount, 
                            outgoing_amount, 
                            new_owner_wc, 
                            new_owner_account_id, 
                            orders));
    } elseif (action == 2) {
        ;; send coins from SM to owner's wallet
        int amount_to_send = message~load_grams();
        throw_if(36, amount_to_send + 500000000 > balance());  ;; nanocoins, 0.5 coin is gas fee, 100000 coins - initial balance()
        accept_message();  ;; aggree to buy gas to finish transaction
        send_grams(owner_wc, owner_account_id, amount_to_send);
        set_data(pack_state(stored_seqno + 1,
                            pubkey,
                            order_seqno, 
                            number_of_wins, 
                            incoming_amount, 
                            outgoing_amount, 
                            owner_wc, 
                            owner_account_id, 
                            orders));
    }
}



;; Q1 no accept_message() in internal   messages
{-
        Why? It has send_grams() and set_data() methods too.
-}
